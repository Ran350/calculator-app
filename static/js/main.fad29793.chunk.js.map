{"version":3,"sources":["css.ts","lib/calculator/src/parser.ts","lib/calculator/src/calculator.ts","lib/calculator/src/utils.ts","components/Display.tsx","components/Button.tsx","components/Inputs.tsx","App.tsx","index.tsx"],"names":["colorShadow","colorBg","colorWhite","Parser","i","countUp","expr","s","isPlus","res","term","length","factor","num","digit","test","parseFloat","calculate","formula","n","result","Math","round","Display","Wrapper","Formula","Result","styled","div","Button","halfSizeSymbol","displaySymbol","setFormula","ButtonStyle","onClick","ACButton","CEButton","slice","button","Inputs","Grid","map","symbol","App","useState","GlobalStyle","Calculator","Title","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fad29793.chunk.js","sourcesContent":["export const fontColor = \"#61677C\";\nexport const colorShadow = \"#BABECC\";\nexport const colorBg = \"#EBECF0\";\nexport const colorWhite = \"#FFF\";\n","type Bnf = (s: string) => number;\n\nexport class Parser {\n  private i: number = 0;\n\n  /**\n   * @description 注目文字を1文字右へずらす\n   */\n  countUp = () => {\n    this.i += 1;\n  };\n\n  /**\n   * @拡張BNF expr ::= (\"+\"|\"-\")?, term, [ (\"+\", term) | (\"-\", term) ]*\n   * @param s\n   * @returns 加算，減算の結果\n   */\n  expr: Bnf = (s) => {\n    // (\"+\"|\"-\")?\n    let isPlus = 1;\n    if (s[this.i] === \"+\") {\n      this.countUp();\n    }\n    if (s[this.i] === \"-\") {\n      this.countUp();\n      isPlus = -1;\n    }\n\n    // term\n    let res = this.term(s) * isPlus;\n\n    // [ (\"+\", term) | (\"-\", term) ]*\n    while (this.i < s.length) {\n      switch (s[this.i]) {\n        case \"+\":\n          this.countUp();\n          res += this.term(s);\n          continue;\n\n        case \"-\":\n          this.countUp();\n          res -= this.term(s);\n          continue;\n\n        default:\n          return res;\n      }\n    }\n    return res;\n  };\n\n  /**\n   * @拡張BNF term = factor, [ (\"*\", factor) | (\"/\", factor) | (\"(\", factor) ]*\n   * @param s\n   * @returns 掛け算，割り算の結果\n   */\n  term: Bnf = (s) => {\n    // factor\n    let res = this.factor(s);\n\n    // [ (\"*\", factor) | (\"/\", factor) | (\"(\", factor) ]*\n    while (this.i < s.length) {\n      switch (s[this.i]) {\n        case \"*\":\n          this.countUp();\n          res *= this.factor(s);\n          continue;\n\n        case \"/\":\n          this.countUp();\n          res /= this.factor(s);\n          continue;\n\n        case \"(\":\n          res *= this.factor(s);\n          continue;\n      }\n      break;\n    }\n    return res;\n  };\n\n  /**\n   * @拡張BNF factor = ( \"(\", expr, \")\" ) | number\n   * @param s\n   * @returns\n   */\n  factor: Bnf = (s) => {\n    if (s[this.i] !== \"(\") {\n      return this.num(s);\n    }\n\n    this.countUp();\n    let res = this.expr(s);\n\n    if (s[this.i] === \")\") {\n      this.countUp();\n    }\n\n    return res;\n  };\n\n  /**\n   * @description 連続する0文字以上の数字を読み取る\n   * @param s\n   * @returns\n   */\n  num: Bnf = (s) => {\n    let digit = \"\";\n\n    while (this.i < s.length && /[0-9.]/.test(s[this.i])) {\n      digit += s[this.i];\n      this.countUp();\n    }\n\n    return parseFloat(digit);\n  };\n}\n","import { Parser } from \"./parser\";\nimport { round } from \"./utils\";\n\ntype Calculate = (formula: string) => number;\nexport const calculate: Calculate = (formula) => {\n  const result = new Parser().expr(formula);\n  return round(result);\n};\n","/**\n * @description 小数点第n位で四捨五入して二進誤差をなくす\n */\nexport const round = (n: number) => {\n  const significantFigure = 9;\n  return Math.round(n * 10 ** significantFigure) / 10 ** significantFigure;\n};\n","import { VFC } from \"react\";\nimport styled from \"styled-components\";\nimport { colorBg, colorShadow, colorWhite } from \"../css\";\nimport { calculate } from \"../lib/calculator/src/calculator\";\n\ntype Props = {\n  formula: string;\n};\n\nexport const Display: VFC<Props> = ({ formula }) => {\n  const result = calculate(formula);\n\n  return (\n    <Wrapper>\n      <Formula>{formula}</Formula>\n      <Result>\n        <div>=</div>\n        <div>{result}</div>\n      </Result>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  font-size: 1.5rem;\n  margin: 1rem 0;\n  width: 21rem;\n`;\n\nconst Formula = styled.div`\n  margin-bottom: 1rem;\n  padding: 0 1.5rem;\n  text-align: right;\n  text-shadow: 1px 1px 0 ${colorWhite};\n`;\n\nconst Result = styled.div`\n  padding: 1rem 1.5rem;\n  width: 100%;\n\n  border: 0;\n  border-radius: 2rem;\n  background-color: ${colorBg};\n  text-shadow: 1px 1px 0 ${colorWhite};\n\n  box-shadow: inset 2px 2px 5px ${colorShadow}, inset -5px -5px 10px ${colorWhite};\n  box-sizing: border-box;\n\n  display: flex;\n  justify-content: space-between;\n`;\n","import type { Dispatch, SetStateAction } from \"react\";\nimport { VFC } from \"react\";\nimport styled from \"styled-components\";\nimport { colorBg, colorShadow, colorWhite } from \"../css\";\n\ntype Props = {\n  halfSizeSymbol: string;\n  displaySymbol: string;\n  formula: string;\n  setFormula: Dispatch<SetStateAction<string>>;\n};\nexport const Button: VFC<Props> = ({ halfSizeSymbol, displaySymbol, formula, setFormula }) => {\n  const updateFormula = () => {\n    if (formula === \"0\" || formula === \"00\") {\n      setFormula(halfSizeSymbol);\n    } else {\n      setFormula(formula + halfSizeSymbol);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <ButtonStyle onClick={updateFormula}>{displaySymbol}</ButtonStyle>\n    </Wrapper>\n  );\n};\n\ntype ACButtonProps = {\n  setFormula: Dispatch<SetStateAction<string>>;\n};\nexport const ACButton: VFC<ACButtonProps> = ({ setFormula }) => {\n  const clearFormula = () => {\n    setFormula(\"0\");\n  };\n\n  return (\n    <Wrapper>\n      <ButtonStyle onClick={clearFormula}>AC</ButtonStyle>\n    </Wrapper>\n  );\n};\n\ntype CEButtonProps = {\n  formula: string;\n  setFormula: Dispatch<SetStateAction<string>>;\n};\nexport const CEButton: VFC<CEButtonProps> = ({ formula, setFormula }) => {\n  const popFormula = () => {\n    if (formula.length === 1) {\n      setFormula(\"0\");\n    } else {\n      setFormula(formula.slice(0, -1));\n    }\n  };\n\n  return (\n    <Wrapper>\n      <ButtonStyle onClick={popFormula}>CE</ButtonStyle>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  text-shadow: 1px 1px 1px ${colorWhite};\n  padding: 0;\n  margin: 0;\n  text-align: center;\n  height: 4rem;\n  width: 4rem;\n  display: block;\n`;\n\nconst ButtonStyle = styled.button`\n  font-weight: bold;\n  font-size: 1.5rem;\n  text-shadow: 1px 1px 0 ${colorWhite};\n  color: #61677c;\n  background-color: ${colorBg};\n\n  margin: 0;\n  border: 0;\n  padding: 0;\n  border-radius: 1rem;\n  box-shadow: -5px -5px 20px ${colorWhite}, 5px 5px 20px ${colorShadow};\n  outline: 0;\n  height: 100%;\n  width: 100%;\n\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n\n  cursor: pointer;\n\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    box-shadow: -2px -2px 5px ${colorWhite}, 2px 2px 5px ${colorShadow};\n  }\n\n  &:active {\n    box-shadow: inset 1px 1px 2px ${colorShadow}, inset -1px -1px 2px ${colorWhite};\n  }\n`;\n","import type { Dispatch, SetStateAction } from \"react\";\nimport { VFC } from \"react\";\nimport styled from \"styled-components\";\nimport { ACButton, Button, CEButton } from \"./Button\";\n\ntype Props = {\n  formula: string;\n  setFormula: Dispatch<SetStateAction<string>>;\n};\n\nexport const Inputs: VFC<Props> = ({ formula, setFormula }) => {\n  const line1Symbols = [\n    [\"(\", \"(\"],\n    [\")\", \")\"],\n  ];\n  const symbols = [\n    // [\"calculate()用の半角表現\",\"表示文字\"]\n    [\"7\", \"7\"], // 2nd line\n    [\"8\", \"8\"],\n    [\"9\", \"9\"],\n    [\"+\", \"＋\"],\n    [\"4\", \"4\"], // 3rd line\n    [\"5\", \"5\"],\n    [\"6\", \"6\"],\n    [\"-\", \"−\"],\n    [\"1\", \"1\"], // 4ht line\n    [\"2\", \"2\"],\n    [\"3\", \"3\"],\n    [\"*\", \"×\"],\n    [\"0\", \"0\"], // 5th line\n    [\"00\", \"00\"],\n    [\".\", \".\"],\n    [\"/\", \"÷\"],\n  ];\n\n  return (\n    <Grid>\n      {/* 1st line */}\n      {line1Symbols.map((symbol) => (\n        <Button\n          halfSizeSymbol={symbol[0]}\n          displaySymbol={symbol[1]}\n          formula={formula}\n          setFormula={setFormula}\n        />\n      ))}\n\n      <CEButton formula={formula} setFormula={setFormula} />\n      <ACButton setFormula={setFormula} />\n\n      {/* 2~5th line */}\n      {symbols.map((symbol, i) => (\n        <Button\n          key={i}\n          halfSizeSymbol={symbol[0]}\n          displaySymbol={symbol[1]}\n          formula={formula}\n          setFormula={setFormula}\n        />\n      ))}\n    </Grid>\n  );\n};\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 1.5rem;\n  max-width: 40rem;\n`;\n","import { useState, VFC } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { Display } from \"./components/Display\";\nimport { Inputs } from \"./components/Inputs\";\nimport { colorBg, colorWhite, fontColor } from \"./css\";\n\nconst App: VFC = () => {\n  const [formula, setFormula] = useState<string>(\"0\");\n\n  return (\n    <>\n      <GlobalStyle />\n\n      <Wrapper>\n        <Calculator>\n          <Title>Calculator</Title>\n          <Display formula={formula} />\n          <Inputs formula={formula} setFormula={setFormula} />\n        </Calculator>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  font-family: \"Montserrat\", sans-serif;\n  background-color: ${colorBg};\n  padding:0;\n  margin:0;\n  max-height: 100vh;\n  font-size:16px;\n  }\n`;\n\nconst Wrapper = styled.div`\n  color: ${fontColor};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n`;\n\nconst Calculator = styled.div`\n  margin: 0 auto;\n  padding:1rem\n  min-width: 30rem;\n`;\n\nconst Title = styled.div`\n  padding: 0;\n  margin: 0;\n  // text-shadow: 1px 1px 1px ${colorWhite};\n  text-align: center;\n  font-size: 1.5rem;\n  font-weight: bold;\n\n  background: linear-gradient(to right, #757f9a 0%, #d7dde8 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}